version: '3.7'

volumes:
    prometheus_data: {}
    grafana_data: {}
    postgres_data: {}
    shared_data: {}
    alert_data: {}

networks:
  crondata:
    driver: overlay
    name: inbound
  nginx:
    driver: overlay
    name: nginx

services:
  nginx:
    image: "utmstack.azurecr.io/crondata-nginx:latest"
    networks:
      - crondata
      - nginx 
    depends_on:
      - grafana
      - prometheus
      - panel 
    environment:
      - SERVER_HOST=${HOSTNAME} 
    ports:
      - "80:80"
#      - "443:443"
      - "7090:9090"
      - "7030:3000"
      - "7093:9093"
      - "7080:8080"
      - "7081:8081"	  
#    volumes:
#      - ${NGINX_CERT}:/etc/nginx/cert
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s

  prometheus:
    image: utmstack.azurecr.io/crondata-prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
      - shared_data:/etc/prometheus/targets
      - alert_data:/etc/prometheus/alerts
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - crondata
    deploy:
      placement:
        constraints:
          - node.role==manager
    ports:
      - 9090:9090

  node-exporter:
    image: utmstack.azurecr.io/crondata-node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - crondata
    ports:
      - 9100:9100
    deploy:
      mode: global

  alertmanager:
    image: utmstack.azurecr.io/crondata-alertmanager:latest
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - crondata
    ports:
      - 9093:9093
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    deploy:
      placement:
        constraints:
          - node.role==manager

  cadvisor:
    image: utmstack.azurecr.io/crondata-google-cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - crondata
    ports:
      - 9001:8080
    deploy:
      mode: global

  grafana:
    image: utmstack.azurecr.io/crondata-grafana
    user: "472"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/grafana_icon.svg:/usr/share/grafana/public/img/grafana_icon.svg:rw
      - ./grafana/home.json:/usr/share/grafana/public/dashboards/home.json:rw
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/defaults.ini:/usr/share/grafana/conf/defaults.ini
    env_file:
      - ./grafana/config.monitoring
    networks:
      - crondata
    ports:
      - 3000:3000
    deploy:
      placement:
        constraints:
          - node.role==manager	  

  cron-postgresql:
    image: utmstack.azurecr.io/crondata-postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./postgres/init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - crondata
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${BD_PASS}
      - POSTGRES_DB=cron_data
    ports:
      - 5432:5432
    command: ["postgres", "-c", "shared_buffers=256MB", "-c", "max_connections=1000"]

  panel:
    image: utmstack.azurecr.io/crondata-panel:latest
    volumes: 
      - shared_data:/etc/prometheus/targets
      - alert_data:/etc/prometheus/alerts
    environment:
      - TOMCAT_ADMIN_USER=admin
      - TOMCAT_ADMIN_PASSWORD=${BD_PASS}
      - JRE_HOME=/opt/tomcat/bin/jre
      - JAVA_HOME=/opt/tomcat/bin/jre
      - CATALINA_BASE=/opt/tomcat/
      - CATALINA_HOME=/opt/tomcat/
      - LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu 
      - SPRING_PROFILES_ACTIVE=prod,swagger
      - SPRING_DATASOURCE_URL=jdbc:postgresql://cron-postgresql:5432/cron_data
      - CRONDATA_SERVER_HOST=${HOSTNAME}
      - DB_PASS=${BD_PASS}
      - PROMETHEUS_TARGET_CONFIG_PATH=/etc/prometheus/targets
      - JHIPSTER_SLEEP=30 # gives time for other services to boot before the application
    depends_on: 
      - cron-postgresql
    networks:
      - crondata
    ports:
     - 8080:8080
    depends_on: 
      - cron-postgresql
    deploy:
      placement:
        constraints:
          - node.role==manager

  filebrowser:
    image: "utmstack.azurecr.io/crondata-filebrowser:latest"
    volumes:
      - alert_data:/etc/prometheus/alerts
    environment:
      - PASSWORD=${BD_PASS}
    depends_on: 
      - prometheus
      - nginx
    networks:
      - crondata
    ports:
     - 8081:8081
    deploy:
      placement:
        constraints:
          - node.role==manager
