version: '3.7'

volumes:
    prometheus_data: {}
    grafana_data: {}
    postgres_data: {}
    shared_data: {}
    alert_data: {}

networks:
  front-tier:
  back-tier:

services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
      - shared_data:/etc/prometheus/targets
      - alert_data:/etc/prometheus/alerts
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - back-tier
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - back-tier
    ports:
      - 9100:9100
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - back-tier
    ports:
      - 9093:9093
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - back-tier
    ports:
      - 9001:8080
    restart: always
    deploy:
      mode: global

  grafana:
    image: utmstack.azurecr.io/crondata-grafana
    user: "472"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/grafana_icon.svg:/usr/share/grafana/public/img/grafana_icon.svg:rw
      - ./grafana/home.json:/usr/share/grafana/public/dashboards/home.json:rw
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/defaults.ini:/usr/share/grafana/conf/defaults.ini
    env_file:
      - ./grafana/config.monitoring
    networks:
      - back-tier
      - front-tier
    restart: always

  cron-postgresql:
    image: postgres:12.3
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./postgres/init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - back-tier
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=cron_data
    ports:
      - 5432:5432

  nginx:
    image: "utmstack.azurecr.io/crondata-nginx:latest"
    restart: always
    networks:
      - back-tier
      - front-tier
    depends_on: 
      - grafana
      - prometheus
      - filebrowser
    environment:
      - SERVER_HOST=${HOSTNAME}
    ports: 
      - 80:80
      - 3000:3000
      - 9090:9090
      - 8081:8081
      
  panel:
    image: utmstack.azurecr.io/crondata-panel:latest
    volumes: 
      - shared_data:/etc/prometheus/targets
      - alert_data:/etc/prometheus/alerts
    environment:
      - TOMCAT_ADMIN_USER=admin
      - TOMCAT_ADMIN_PASSWORD=${BD_PASS}
      - JRE_HOME=/opt/tomcat/bin/jre
      - JAVA_HOME=/opt/tomcat/bin/jre
      - CATALINA_BASE=/opt/tomcat/
      - CATALINA_HOME=/opt/tomcat/
      - LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu 
      - SPRING_PROFILES_ACTIVE=prod,swagger
      - SPRING_DATASOURCE_URL=jdbc:postgresql://cron-postgresql:5432/cron_data
      - CRONDATA_SERVER_HOST=${HOSTNAME}
      - DB_PASS=${BD_PASS}
      - PROMETHEUS_TARGET_CONFIG_PATH=/etc/prometheus/targets
      - JHIPSTER_SLEEP=30 # gives time for other services to boot before the application
    depends_on: 
      - cron-postgresql
      - prometheus
    networks:
      - back-tier
      - front-tier
    ports:
     - 8080:8080

  filebrowser:
    image: "utmstack.azurecr.io/crondata-filebrowser:latest"
    volumes:
      - alert_data:/etc/prometheus/alerts
    environment:
      - PASSWORD=${BD_PASS}
    depends_on: 
      - prometheus
    networks:
      - back-tier
      - front-tier
