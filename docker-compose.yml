version: '3.7'

volumes:
    prometheus_data: {}
    grafana_data: {}
    postgres_data: {}
    shared_data: {}

networks:
  front-tier:
  back-tier:

services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
      - shared_data:/etc/prometheus/targets
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
      - node-exporter:node-exporter
    depends_on:
      - cadvisor
    networks:
      - back-tier
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8085:8080
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/defaults.ini:/usr/share/grafana/conf/defaults.ini
    env_file:
      - ./grafana/config.monitoring
    networks:
      - back-tier
      - front-tier
    restart: always
  
  # Jaeger
  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268"
      - "14250"

  # Zipkin
  zipkin-all-in-one:
    networks:
      - back-tier
      - front-tier
    image: openzipkin/zipkin:latest
    ports:
      - "8086:9411"

  # Collector
  otel-collector:
    image: ${OTELCOL_IMG}
    command: ["--config=/etc/otel-collector-config.yaml", "${OTELCOL_ARGS}"]
    networks:
      - back-tier
      - front-tier
    volumes:
      - ./opentelemetry/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317"        # OTLP gRPC receiver
      - "55670:55679" # zpages extension
    depends_on:
      - jaeger-all-in-one
      - zipkin-all-in-one

  # Agent
  otel-agent:
    image: ${OTELCOL_IMG}
    networks:
      - back-tier
      - front-tier
    command: ["--config=/etc/otel-agent-config.yaml", "${OTELCOL_ARGS}"]
    volumes:
      - ./opentelemetry/otel-agent-config.yaml:/etc/otel-agent-config.yaml
    ports:
      - "8887:8888"   # Prometheus metrics exposed by the agent
      - "14250"       # Jaeger grpc receiver
      - "14268"       # Jaeger http thrift receiver
      - "55678"       # OpenCensus receiver
      - "4317"        # OTLP gRPC receiver
      - "9411"        # Zipkin receiver
      - "1777:1777"   # pprof extension
      - "55679:55679" # zpages extension
      - "13133"       # health_check
    depends_on:
      - otel-collector

  # Synthetic load generators
  jaeger-emitter:
    image: omnition/synthetic-load-generator:1.0.25
    networks:
      - back-tier
      - front-tier
    environment:
      - JAEGER_COLLECTOR_URL=http://otel-agent:14268
    depends_on:
      - otel-agent

  zipkin-emitter:
    image: omnition/synthetic-load-generator:1.0.25
    networks:
      - back-tier
      - front-tier
    environment:
      - ZIPKINV2_JSON_URL=http://otel-agent:8086/api/v2/spans
    depends_on:
      - otel-agent

  metrics-load-generator:
    build:
      dockerfile: ./Dockerfile
      context: ./opentelemetry/app
    environment:
      - OTEL_AGENT_ENDPOINT=otel-agent:4317
    networks:
      - back-tier  
      - front-tier
    depends_on:
      - otel-agent

  cron-postgresql:
    image: postgres:12.3
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./postgres/init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - back-tier
      - front-tier
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=cron_data
    ports:
      - 5432:5432

  cron_backend:
    image: utmstack.azurecr.io/crondata-backend
    restart: always
    networks:
      - back-tier
      - front-tier   
    volumes: 
       - shared_data:/etc/prometheus/targets
    environment:
      - _JAVA_OPTIONS=-Xmx512m -Xms256m
      - SPRING_PROFILES_ACTIVE=prod,swagger
      - SPRING_DATASOURCE_URL=jdbc:postgresql://cron-postgresql:5432/cron_data
      - DB_PASS=${DB_PASS}
      - PROMETHEUS_TARGET_CONFIG_PATH=/etc/prometheus/targets
      - JHIPSTER_SLEEP=30 # gives time for other services to boot before the application
    ports:
     - 8080:8080
    depends_on: 
      - cron-postgresql

  cron_frontend:
    image: utmstack.azurecr.io/crondata-frontend:latest
    restart: always
    networks:
      - back-tier
      - front-tier
    depends_on: 
      - grafana
      - prometheus
      - cron_backend
    environment:
      - SERVER_HOST=${HOSTNAME}
    ports: 
      - 80:80
